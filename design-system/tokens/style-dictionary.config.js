const StyleDictionary = require("style-dictionary");
const version = require("./package.json").version;

StyleDictionary.registerFileHeader({
  name: "openSystemHeader",
  fileHeader: _ => {
    const current = new Date();

    return [
      `** Do NOT edit this file directly **`,
      `Code generated on ${current.getDate()}/${
        current.getMonth() + 1
      }/${current.getFullYear()} @ ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()} by Open System`,
      ``,
      `Open System - Design Tokens v${version ?? "1.0"}`,
      `Documentation: https://sullivanpj.github.io/open-system/design-system`,
    ];
  },
});

// Register an "attribute" transform to codify the font's details
// as named attributes.
StyleDictionary.registerTransform({
  name: 'attribute/font',
  type: 'attribute',
  transformer: prop => ({
    category: prop.path[0],
    type: prop.path[1],
    family: prop.path[2],
    weight: prop.path[3],
    style: prop.path[4]
  })
});

// Register a custom format to generate @font-face rules.
StyleDictionary.registerFormat({
  name: 'font-face',
  formatter: ({ dictionary: { allTokens }, options }) => {
    const fontPathPrefix = options.fontPathPrefix || '../';

    // https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src
    const formatsMap = {
      'woff2': 'woff2',
      'woff': 'woff',
      'ttf': 'truetype',
      'otf': 'opentype',
      'svg': 'svg',
      'eot': 'embedded-opentype'
    };

    return allTokens.reduce((fontList, prop) => {
      const {
        attributes: { family, weight, style },
        formats,
        value: path
      } = prop;

      const urls = formats
        .map(extension => `url("${fontPathPrefix}${path}.${extension}") format("truetype")`);

      const fontCss = [
        '@font-face {',
        `\n\tfont-family: "${family}";`,
        `\n\tfont-style: ${style};`,
        `\n\tfont-weight: ${weight};`,
        `\n\tsrc: ${urls.join(',\n\t\t\t ')};`,
        '\n\tfont-display: fallback;',
        '\n}\n'
      ].join('');

      fontList.push(fontCss);

      return fontList;
    }, []).join('\n');
  }
});


module.exports = {
  "source": ["design-system/tokens/src/**/*.json"],
  "platforms": {
    "js": {
      "transformGroup": "js",
      "buildPath": "dist/design-system/tokens/js/",
      "files": [
        {
          "destination": "theme.js",
          "format": "javascript/module",
          "options": {
            "fileHeader": "openSystemHeader",
          },
        },
      ],
      "actions": ["copy_assets"],
    },
    "css": {
      "transformGroup": "css",
      "prefix": "os",
      "buildPath": "dist/design-system/tokens/css/",
      "files": [
        {
          "destination": "theme.css",
          "format": "css/variables",
          "options": {
            "outputReferences": true,
            "fileHeader": "openSystemHeader",
          },
        },
      ],
    },
    "css-font-face": {
      "transforms": ["attribute/font"],
      "buildPath": "dist/design-system/tokens/assets/",
      "files": [
        {
          "destination": "fonts.css",
          "format": "css/fonts.css",
          "filter": {
            "attributes": {
              "category": "asset",
              "type": "font"
            }
          },
          "options": {
            "fontPathPrefix": "../"
          }
        }
      ]
    }
  }
};
