/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonTransitionDirections, ButtonTypes, ButtonVariants } from "./components/os-button/os-button.types";
export namespace Components {
    interface OsButton {
        /**
          * Is the button read-only (cannot be clicked by user)
         */
        "disabled": boolean;
        /**
          * Is the button filled by default
         */
        "inverse": boolean;
        /**
          * The direction the hover animation will start on
         */
        "transitionDirection": ButtonTransitionDirections;
        /**
          * Is the button filled by default
         */
        "type": ButtonTypes;
        /**
          * The variant style of the button
         */
        "variant": ButtonVariants;
    }
    interface OsInput {
        /**
          * Decides if input is disabled
         */
        "disabled": boolean;
        /**
          * An info message displayed under the input
         */
        "info"?: string;
        /**
          * The text label displayed above the input field
         */
        "label": string;
        /**
          * The maximum input value allowed
         */
        "max"?: number;
        /**
          * The maximum allowed input length value of the field
         */
        "maxLength"?: number;
        /**
          * The minimum input value allowed
         */
        "min"?: number;
        /**
          * The minimum allowed input length value of the field
         */
        "minLength"?: number;
        /**
          * The name of the input field
         */
        "name": string;
        /**
          * Should the border displayed on the left side of the input field remain hidden
         */
        "noBorder": boolean;
        /**
          * A regular expression pattern, such as [A-Z]+ for one or more uppercase characters
         */
        "pattern"?: string;
        /**
          * Placeholder text when the field value is empty
         */
        "placeholder"?: string;
        /**
          * Decides if input field required
         */
        "required": boolean;
        /**
          * Input select method
         */
        "selectText": () => Promise<void>;
        /**
          * Input error method
         */
        "setError": (error: string) => Promise<void>;
        /**
          * Input focus method
         */
        "setFocus": () => Promise<void>;
        /**
          * Input warning method
         */
        "setWarning": (warning: string) => Promise<void>;
        /**
          * Type of input
         */
        "type": string;
    }
}
export interface OsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsButtonElement;
}
export interface OsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOsInputElement;
}
declare global {
    interface HTMLOsButtonElement extends Components.OsButton, HTMLStencilElement {
    }
    var HTMLOsButtonElement: {
        prototype: HTMLOsButtonElement;
        new (): HTMLOsButtonElement;
    };
    interface HTMLOsInputElement extends Components.OsInput, HTMLStencilElement {
    }
    var HTMLOsInputElement: {
        prototype: HTMLOsInputElement;
        new (): HTMLOsInputElement;
    };
    interface HTMLElementTagNameMap {
        "os-button": HTMLOsButtonElement;
        "os-input": HTMLOsInputElement;
    }
}
declare namespace LocalJSX {
    interface OsButton {
        /**
          * Is the button read-only (cannot be clicked by user)
         */
        "disabled"?: boolean;
        /**
          * Is the button filled by default
         */
        "inverse"?: boolean;
        /**
          * Event emitted when the user clicks into the button
         */
        "onOsClick"?: (event: OsButtonCustomEvent<MouseEvent>) => void;
        /**
          * The direction the hover animation will start on
         */
        "transitionDirection"?: ButtonTransitionDirections;
        /**
          * Is the button filled by default
         */
        "type"?: ButtonTypes;
        /**
          * The variant style of the button
         */
        "variant"?: ButtonVariants;
    }
    interface OsInput {
        /**
          * Decides if input is disabled
         */
        "disabled"?: boolean;
        /**
          * An info message displayed under the input
         */
        "info"?: string;
        /**
          * The text label displayed above the input field
         */
        "label"?: string;
        /**
          * The maximum input value allowed
         */
        "max"?: number;
        /**
          * The maximum allowed input length value of the field
         */
        "maxLength"?: number;
        /**
          * The minimum input value allowed
         */
        "min"?: number;
        /**
          * The minimum allowed input length value of the field
         */
        "minLength"?: number;
        /**
          * The name of the input field
         */
        "name"?: string;
        /**
          * Should the border displayed on the left side of the input field remain hidden
         */
        "noBorder"?: boolean;
        /**
          * Event emitted when the user clicks out of the input field
         */
        "onOsBlur"?: (event: OsInputCustomEvent<FocusEvent>) => void;
        /**
          * Event emitted during a value in change the input field
         */
        "onOsChange"?: (event: OsInputCustomEvent<InputEvent>) => void;
        /**
          * Event emitted when the user clicks into the input field
         */
        "onOsFocus"?: (event: OsInputCustomEvent<FocusEvent>) => void;
        /**
          * Event emitted during a value in change the input field
         */
        "onOsInput"?: (event: OsInputCustomEvent<InputEvent>) => void;
        /**
          * A regular expression pattern, such as [A-Z]+ for one or more uppercase characters
         */
        "pattern"?: string;
        /**
          * Placeholder text when the field value is empty
         */
        "placeholder"?: string;
        /**
          * Decides if input field required
         */
        "required"?: boolean;
        /**
          * Type of input
         */
        "type"?: string;
    }
    interface IntrinsicElements {
        "os-button": OsButton;
        "os-input": OsInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "os-button": LocalJSX.OsButton & JSXBase.HTMLAttributes<HTMLOsButtonElement>;
            "os-input": LocalJSX.OsInput & JSXBase.HTMLAttributes<HTMLOsInputElement>;
        }
    }
}
