diff --git a/lib/utils/crypto.js b/lib/utils/crypto.js
index 626e882e1de415e0351fd3f7b28881076d589a30..3c0d389449e0a29b99620f7db5ecddd62f332f14 100644
--- a/lib/utils/crypto.js
+++ b/lib/utils/crypto.js
@@ -24,7 +24,7 @@ var __importStar = (this && this.__importStar) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.decryptSymmetric128BitHexKeyUTF8 = exports.encryptSymmetric128BitHexKeyUTF8 = exports.decryptSymmetric = exports.encryptSymmetric = exports.createSymmetricKey = exports.decryptAsymmetric = exports.encryptAsymmetric = void 0;
-var crypto = __importStar(require("crypto"));
+var crypto = __importStar(require("node:crypto"));
 var nacl = __importStar(require("tweetnacl"));
 var util = __importStar(require("tweetnacl-util"));
 var variables_1 = require("../variables");
diff --git a/src/utils/crypto.ts b/src/utils/crypto.ts
index fb1fda396154c782ef9c45f89614515d8a002a91..d24e672f6f7c6c142ed9bd6a1f67a7446bf5e7f8 100644
--- a/src/utils/crypto.ts
+++ b/src/utils/crypto.ts
@@ -1,23 +1,23 @@
-import * as crypto from 'crypto';
-import * as nacl from 'tweetnacl';
-import * as util from 'tweetnacl-util';
-import { 
-    IEncryptAsymmetricInput, 
-    IEncryptSymmetric128BitHexKeyUTF8Input,
-    IEncryptSymmetricInput,
-    IEncryptSymmetricOutput,
-    IDecryptAsymmetricInput, 
-    IDecryptSymmetric128BitHexKeyUTF8Input,
-    IDecryptSymmetricInput
-} from '../types/utils';
+import * as crypto from "node:crypto";
+import * as nacl from "tweetnacl";
+import * as util from "tweetnacl-util";
 import {
-    IV_BYTES_SIZE,
-    SYMMETRIC_KEY_BYTES_SIZE,
-    ALGORITHM_AES_256_GCM,
-    ENCODING_SCHEME_BASE64,
-    ENCODING_SCHEME_HEX,
-    ENCODING_SCHEME_UTF8
-} from '../variables';
+  IEncryptAsymmetricInput,
+  IEncryptSymmetric128BitHexKeyUTF8Input,
+  IEncryptSymmetricInput,
+  IEncryptSymmetricOutput,
+  IDecryptAsymmetricInput,
+  IDecryptSymmetric128BitHexKeyUTF8Input,
+  IDecryptSymmetricInput,
+} from "../types/utils";
+import {
+  IV_BYTES_SIZE,
+  SYMMETRIC_KEY_BYTES_SIZE,
+  ALGORITHM_AES_256_GCM,
+  ENCODING_SCHEME_BASE64,
+  ENCODING_SCHEME_HEX,
+  ENCODING_SCHEME_UTF8,
+} from "../variables";
 
 /**
  * Return assymmetrically encrypted [plaintext] using [publicKey] where
@@ -30,19 +30,23 @@ import {
  * @returns {String} ciphertext - base64-encoded ciphertext
  * @returns {String} nonce - base64-encoded nonce
  */
-export const encryptAsymmetric = ({ plaintext, publicKey, privateKey }: IEncryptAsymmetricInput) => {
-	const nonce = nacl.randomBytes(24);
-    const ciphertext = nacl.box(
-        util.decodeUTF8(plaintext),
-        nonce,
-        util.decodeBase64(publicKey),
-        util.decodeBase64(privateKey)
-    );
-
-	return {
-		ciphertext: util.encodeBase64(ciphertext),
-		nonce: util.encodeBase64(nonce)
-	};
+export const encryptAsymmetric = ({
+  plaintext,
+  publicKey,
+  privateKey,
+}: IEncryptAsymmetricInput) => {
+  const nonce = nacl.randomBytes(24);
+  const ciphertext = nacl.box(
+    util.decodeUTF8(plaintext),
+    nonce,
+    util.decodeBase64(publicKey),
+    util.decodeBase64(privateKey)
+  );
+
+  return {
+    ciphertext: util.encodeBase64(ciphertext),
+    nonce: util.encodeBase64(nonce),
+  };
 };
 
 /**
@@ -55,19 +59,25 @@ export const encryptAsymmetric = ({ plaintext, publicKey, privateKey }: IEncrypt
  * @param {String} obj.privateKey - private key of the receiver (current user)
  * @param {String} plaintext - UTF8 plaintext
  */
-export const decryptAsymmetric = ({ ciphertext, nonce, publicKey, privateKey }: IDecryptAsymmetricInput) => nacl.box.open(
-        util.decodeBase64(ciphertext),
-        util.decodeBase64(nonce),
-        util.decodeBase64(publicKey),
-        util.decodeBase64(privateKey)
-);
+export const decryptAsymmetric = ({
+  ciphertext,
+  nonce,
+  publicKey,
+  privateKey,
+}: IDecryptAsymmetricInput) =>
+  nacl.box.open(
+    util.decodeBase64(ciphertext),
+    util.decodeBase64(nonce),
+    util.decodeBase64(publicKey),
+    util.decodeBase64(privateKey)
+  );
 
 /**
- * Return new base64-encoded, 256-bit symmetric key 
+ * Return new base64-encoded, 256-bit symmetric key
  * @returns {String} key - new symmetric key
  */
-export const createSymmetricKey = (): string => 
-    crypto.randomBytes(SYMMETRIC_KEY_BYTES_SIZE).toString('base64');
+export const createSymmetricKey = (): string =>
+  crypto.randomBytes(SYMMETRIC_KEY_BYTES_SIZE).toString("base64");
 
 /**
  * Return symmetrically encrypted [plaintext] using [key].
@@ -80,23 +90,22 @@ export const createSymmetricKey = (): string =>
  * @returns {String} obj.tag (base64) tag
  */
 export const encryptSymmetric = ({
-	plaintext,
-	key
+  plaintext,
+  key,
 }: IEncryptSymmetricInput): IEncryptSymmetricOutput => {
-    
-    const iv = crypto.randomBytes(IV_BYTES_SIZE);
+  const iv = crypto.randomBytes(IV_BYTES_SIZE);
 
-    const secretKey = crypto.createSecretKey(key, 'base64');
-    const cipher = crypto.createCipheriv(ALGORITHM_AES_256_GCM, secretKey, iv);
+  const secretKey = crypto.createSecretKey(key, "base64");
+  const cipher = crypto.createCipheriv(ALGORITHM_AES_256_GCM, secretKey, iv);
 
-    let ciphertext = cipher.update(plaintext, 'utf8', 'base64');
-    ciphertext += cipher.final('base64');
+  let ciphertext = cipher.update(plaintext, "utf8", "base64");
+  ciphertext += cipher.final("base64");
 
-	return {
-		ciphertext,
-		iv: iv.toString('base64'),
-		tag: cipher.getAuthTag().toString('base64')
-	};
+  return {
+    ciphertext,
+    iv: iv.toString("base64"),
+    tag: cipher.getAuthTag().toString("base64"),
+  };
 };
 
 /**
@@ -110,35 +119,34 @@ export const encryptSymmetric = ({
  * @returns {String} cleartext - (utf8) the deciphered ciphertext
  */
 export const decryptSymmetric = ({
-	ciphertext,
-	iv,
-	tag,
-	key
+  ciphertext,
+  iv,
+  tag,
+  key,
 }: IDecryptSymmetricInput): string => {
+  const secretKey = crypto.createSecretKey(key, "base64");
 
-    const secretKey = crypto.createSecretKey(key, 'base64');
-
-    const decipher = crypto.createDecipheriv(
-        ALGORITHM_AES_256_GCM,
-        secretKey,
-        Buffer.from(iv, 'base64')
-    );
+  const decipher = crypto.createDecipheriv(
+    ALGORITHM_AES_256_GCM,
+    secretKey,
+    Buffer.from(iv, "base64")
+  );
 
-    decipher.setAuthTag(Buffer.from(tag, 'base64'));
+  decipher.setAuthTag(Buffer.from(tag, "base64"));
 
-    let cleartext = decipher.update(ciphertext, 'base64', 'utf8');
-    cleartext += decipher.final('utf8');
+  let cleartext = decipher.update(ciphertext, "base64", "utf8");
+  cleartext += decipher.final("utf8");
 
-    return cleartext;
+  return cleartext;
 };
 
 /**
  * Return symmetrically encrypted [plaintext] using [key].
- * 
+ *
  * NOTE: THIS FUNCTION SHOULD NOT BE USED FOR ALL FUTURE
  * ENCRYPTION OPERATIONS UNLESS IT TOUCHES OLD FUNCTIONALITY
  * THAT USES IT.
- * 
+ *
  * @param {Object} obj
  * @param {String} obj.plaintext - (utf8) plaintext to encrypt
  * @param {String} obj.key - (hex) 128-bit key
@@ -147,42 +155,50 @@ export const decryptSymmetric = ({
  * @returns {String} obj.iv (base64) iv
  * @returns {String} obj.tag (base64) tag
  */
-export const encryptSymmetric128BitHexKeyUTF8 = ({ plaintext, key }: IEncryptSymmetric128BitHexKeyUTF8Input) => {
-    const ALGORITHM = 'aes-256-gcm';
-    const BLOCK_SIZE_BYTES = 16;
-
-    const iv = crypto.randomBytes(BLOCK_SIZE_BYTES);
-    const cipher = crypto.createCipheriv(ALGORITHM, key, iv);
-
-    let ciphertext = cipher.update(plaintext, 'utf8', 'base64');
-    ciphertext += cipher.final('base64');
-    return {
-        ciphertext,
-        iv: iv.toString('base64'),
-        tag: cipher.getAuthTag().toString('base64')
-    };
-} 
+export const encryptSymmetric128BitHexKeyUTF8 = ({
+  plaintext,
+  key,
+}: IEncryptSymmetric128BitHexKeyUTF8Input) => {
+  const ALGORITHM = "aes-256-gcm";
+  const BLOCK_SIZE_BYTES = 16;
+
+  const iv = crypto.randomBytes(BLOCK_SIZE_BYTES);
+  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);
+
+  let ciphertext = cipher.update(plaintext, "utf8", "base64");
+  ciphertext += cipher.final("base64");
+  return {
+    ciphertext,
+    iv: iv.toString("base64"),
+    tag: cipher.getAuthTag().toString("base64"),
+  };
+};
 
 /**
  * Return symmetrically decrypted [ciphertext] using [iv], [tag],
  * and [key].
- * 
+ *
  * NOTE: THIS FUNCTION SHOULD NOT BE USED FOR ALL FUTURE
  * DECRYPTION OPERATIONS UNLESS IT TOUCHES OLD FUNCTIONALITY
  * THAT USES IT. USE decryptSymmetric() instead
-*/
-export const decryptSymmetric128BitHexKeyUTF8 = ({ ciphertext, iv, tag, key }: IDecryptSymmetric128BitHexKeyUTF8Input) => {
-    const ALGORITHM = 'aes-256-gcm';
-    
-    const decipher = crypto.createDecipheriv(
-        ALGORITHM,
-        key,
-        Buffer.from(iv, 'base64')
-    );
-    decipher.setAuthTag(Buffer.from(tag, 'base64'));
-
-    let cleartext = decipher.update(ciphertext, 'base64', 'utf8');
-    cleartext += decipher.final('utf8');
-
-    return cleartext;
-}
\ No newline at end of file
+ */
+export const decryptSymmetric128BitHexKeyUTF8 = ({
+  ciphertext,
+  iv,
+  tag,
+  key,
+}: IDecryptSymmetric128BitHexKeyUTF8Input) => {
+  const ALGORITHM = "aes-256-gcm";
+
+  const decipher = crypto.createDecipheriv(
+    ALGORITHM,
+    key,
+    Buffer.from(iv, "base64")
+  );
+  decipher.setAuthTag(Buffer.from(tag, "base64"));
+
+  let cleartext = decipher.update(ciphertext, "base64", "utf8");
+  cleartext += decipher.final("utf8");
+
+  return cleartext;
+};
