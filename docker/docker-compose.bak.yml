version: "3.9"

networks:
  # Network for microservices
  network-microservice:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.4.0/24
  network-eventstore:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.6.0/24

services:
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - 5050:80
    networks:
      - network-microservice
    volumes:
      - pgadmin-data:/root/.pgadmin
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  reaction.write-db:
    container_name: reaction.write-db
    image: postgres
    restart: always
    ports:
      - 5432:5432
    networks:
      - network-microservice
    volumes:
      - write-data:/var/lib/postgresql/data
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
     - network-microservice
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    networks:
     - network-microservice
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9997:9997
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://${ROOT_HOST}:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: broker
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
     - network-microservice
    volumes:
       - ./message.json:/data/message.json
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic blog.engagement.reaction.count --replication-factor 1 --partitions 1

      kafka-console-producer --bootstrap-server broker:29092 --topic blog.engagement.reaction.count < /data/message.json'

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - 8081:8081
    networks:
      - network-microservice
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ${ROOT_HOST}:9092
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:latest
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8088:8088
    networks:
      - network-microservice
    environment:
      KSQL_LISTENERS: http://ksqldb-server:8088
      KSQL_BOOTSTRAP_SERVERS: ${ROOT_HOST}:9092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: true
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: true
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:latest
    container_name: ksqldb-cli
    networks:
      - network-microservice
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    deploy:
      restart_policy:
        condition: always
        delay: 5s

  connect:
    image: fieldengineering/redis-kafka-connect
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${ROOT_HOST}:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.2.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  redis:
    image: redislabs/redismod
    hostname: redis
    container_name: redis
    ports:
      - 6379:6379

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    networks:
     - network-microservice
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: cluster-0
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${ROOT_HOST}:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: true
    deploy:
      restart_policy:
        condition: always
        delay: 5s


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    networks:
     - network-microservice
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: cluster-0
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_HOST}
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb-server:8088
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: true


      #KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry:8085
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083


  # reaction.read-db:
  #  container_name: reaction.read-db
  #  image: redis:alpine
  #  restart: always
  #  ports:
  #    - "5430:6379"
  #  networks:
  #    - network-microservice
  #  volumes:
  #    - read-data:/data
  #  environment:
  #    ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}

volumes:
  pgadmin-data:
  write-data:
  read-data:
  #snapshot-data:
  #  driver: local


  # reaction.read-db:
  #  container_name: reaction.read-db
  #  image: postgres
  #  restart: always
  #  ports:
  #    - "5434:5432"
  #  networks:
  #    - network-microservice
  #  volumes:
  #    - read-data:/var/lib/postgresql/data
  #  environment:
  #    ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}

  #zookeeper:
  #  image: confluentinc/cp-zookeeper:latest
  #  container_name: zookeeper
  #  networks:
  #   - network-microservice
  #  ports:
  #    - 2181:2181
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: 2181
  #    ZOOKEEPER_TICK_TIME: 2000

  #kafka:
  #  image: confluentinc/cp-kafka:latest
  #  container_name: kafka
  #  networks:
  #   - network-microservice
  #  depends_on:
  #    - zookeeper
  #  ports:
  #    - 9092:9092
  #  environment:
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #    KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_MIN_INSYNC_REPLICAS: 1

 # kafka-ui:
 #   container_name: kafka-ui
 #   image: provectuslabs/kafka-ui:latest
 #   ports:
 #     - 8084:8080
 #   networks:
 #     - network-microservice
 #   environment:
 #     - KAFKA_CLUSTERS_0_NAME=network-microservice
 #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=PLAINTEXT://kafka:29092
    #  - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    #  - KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME=debezium
    #  - KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS=http://debezium-connect:8083
  #  depends_on:
  #    - zookeeper
  #    - kafka
