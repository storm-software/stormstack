// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

// const lightCodeTheme = require("prism-react-renderer/themes/github");
// const darkCodeTheme = require("prism-react-renderer/themes/dracula");

// const draculaTheme = require("prism-react-renderer/themes/dracula");

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: "Open System",
  tagline: "Application Documentation and Developer Guide",
  url: "https://sullivanpj.github.io",
  baseUrl: "/open-system/",
  onBrokenLinks: "throw",
  onBrokenMarkdownLinks: "warn",
  favicon: "img/favicon.ico",
  organizationName: "sullivanpj",
  projectName: "open-system",
  trailingSlash: false,
  titleDelimiter: "ðŸ§ª",

  // Even if you don't use internalization, you can use this field to set useful
  // metadata like html lang. For example, if your site is Chinese, you may want
  // to replace "en" with "zh-Hans".
  i18n: {
    defaultLocale: "en",
    locales: ["en"],
  },

  plugins: [
    [
      "docusaurus-plugin-typedoc",
      {
        entryPoints: [
          "libs/core/typescript/utilities",
          "libs/core/typescript/components",
          "libs/core/typescript/data-access",
          "libs/core/typescript/feature-form",
          "libs/core/typescript/feature-notifications",
          "libs/core/typescript/feature-kafka",
          "libs/core/typescript/feature-pdf",
          "libs/shared/typescript/components",
          "libs/shared/typescript/data-access",
          "libs/shared/typescript/feature-address",
          "libs/user-management/typescript/components",
          "libs/user-management/typescript/data-access",
          "libs/portfolio/typescript/feature-resume",
          "libs/engagement/typescript/feature-rating",
          "libs/contact/typescript/components",
          "libs/contact/typescript/data-access",
          "apps/web/shell",
        ],
        entryPointStrategy: "packages",
        theme: "markdown",
        sidebar: {
          fullNames: true,
          type: "autogenerated",
          dirName: "./docs/docs/api",
        },
      },
    ],
    [
      "docusaurus-plugin-react-docgen-typescript",
      /** @type {import('docusaurus-plugin-react-docgen-typescript').Options} */
      {
        // pass in a single string or an array of strings
        src: ["libs/**/typescript/**/*.tsx", "apps/web/shell/**/*.tsx"],
        parserOptions: {
          // pass parserOptions to react-docgen-typescript
          // here is a good starting point which filters out all
          // types from react
          propFilter: (prop, component) => {
            if (prop.parent) {
              return !prop.parent.fileName.includes("@types/react");
            }

            return true;
          },
        },
      },
    ],
  ],
  presets: [
    [
      "classic",
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          sidebarPath: require.resolve("./sidebars.js"),
          editUrl: "https://github.com/sullivanpj/open-system",
          exclude: ["**/decisions/**"],
        },
        theme: {
          customCss: require.resolve("./src/css/custom.css"),
        },
      }),
    ],
    [
      "redocusaurus",
      {
        // Plugin Options for loading OpenAPI files
        specs: [
          {
            id: "Shared-APIs",
            spec: "libs/shared/config/src/shared.api-spec.json",
            route: "/end-points/shared/",
          },
          {
            id: "Reaction-APIs",
            spec: "libs/reaction/config/src/reaction.api-spec.json",
            route: "/end-points/reaction/",
          },
          {
            id: "Contact-APIs",
            spec: "libs/contact/config/src/contact.api-spec.json",
            route: "/end-points/contact/",
          },
        ],
        theme: {},

        /**
         * Options to pass to Redoc
         *
         * @see https://github.com/redocly/redoc#redoc-options-object
         */
        options: { expandResponses: "200" },
      },
    ],
  ],

  themes: ["docusaurus-theme-redoc"],
  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      metadata: [
        {
          name: "keywords",
          content:
            "pat sullivan development, pat sullivan, pat, sullivan, development, open system, open, system, storybook",
        },
      ],
      colorMode: {
        defaultMode: "dark",
        disableSwitch: false,
        respectPrefersColorScheme: false,
      },
      announcementBar: {
        id: "alert",
        content:
          '<b> The developer of this repository is looking for work! If interested, please reach out to <a target="_blank" rel="noopener noreferrer" href="mailto:Patrick.Joseph.Sullivan@ProtonMail.com">Patrick.Joseph.Sullivan@ProtonMail.com</a>.</b>',
        backgroundColor: "#371864",
        textColor: "#fff",
        isCloseable: true,
      },
      tableOfContents: {
        minHeadingLevel: 2,
        maxHeadingLevel: 5,
      },
      navbar: {
        title: "Open System",
        items: [
          {
            to: "design-system",
            position: "left",
            label: "Design System",
          },
          {
            to: "docs/end-points/introduction",
            label: "OpenAPI Specs",
            position: "left",
            items: [
              {
                to: "/end-points/reaction",
                label: "Reaction-APIs",
              },
              {
                to: "/end-points/contact",
                label: "Contact-APIs",
              },
            ],
          },
          {
            to: "api",
            label: "API Reference",
            position: "left",
          },
          {
            type: "doc",
            docId: "getting-started/installation",
            to: "getting-started/installation",
            label: "Training",
            position: "left",
          },
          {
            href: "https://github.com/sullivanpj/open-system",
            label: "GitHub",
            position: "right",
          },
        ],
      },
      footer: {
        style: "light",
        links: [
          {
            title: "Documents",
            items: [
              {
                label: "OpenAPI Specs",
                to: "docs/end-points/introduction",
              },
              {
                label: "Design System",
                to: "design-system",
              },
              {
                label: "Docs Style Guide",
                to: "docs/doc-creation/docs-style-guide",
              },
            ],
          },
          {
            title: "Training",
            items: [
              {
                label: "Getting Started",
                to: "docs/getting-started/introduction",
              },
            ],
          },
          {
            title: "Developer",
            items: [
              {
                href: "https://wwww.linkedin.com/in/patrick-sullivan-dev",
                label: "LinkedIn",
                position: "right",
              },
              {
                label: "GitHub",
                href: "https://github.com/sullivanpj",
              },
            ],
          },
          {
            title: "Repository",
            items: [
              {
                label: "Links",
                to: "docs/changelog",
              },
              {
                label: "Changelog",
                to: "docs/changelog",
              },
              {
                label: "GitHub",
                href: "https://github.com/sullivanpj/open-system",
              },
            ],
          },
        ],
        logo: {
          alt: "Open System Solutions",
          src: "img/open-system-logo.gif",
          href: "https://github.com/sullivanpj/open-system",
          width: 105,
          height: 150,
        },
        copyright: `Copyright Â© ${new Date().getFullYear()} Pat Sullivan Development.`,
      },
    }),
};

module.exports = config;
