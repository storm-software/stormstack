{
  "asyncapi": "2.6.0",
  "id": "https://user-management-api.open-system.workers.dev",
  "info": {
    "title": "User Management - API Service",
    "version": "1.0.0",
    "description": "Various Open System services responsible for processing user related data\r\n### Data: \r\n* Personal Information\r\n* Account Activity\r\n* Security Settings",
    "termsOfService": "https://patsullivan.org/terms",
    "contact": {
      "name": "Pat Sullivan",
      "url": "https://patsullivan.org/contact",
      "email": "contact@patsullivan.org"
    },
    "license": {
      "name": "BSD 2-Clause License",
      "url": "https://patsullivan.org/license"
    }
  },
  "tags": [
    {
      "name": "user-management",
      "description": "User account specific data/actions."
    },
    {
      "name": "security",
      "description": "Data used in the security processes."
    }
  ],
  "defaultContentType": "application/json",
  "servers": {
    "message-broker": {
      "url": "fitting-dassie-7031-us1-kafka.upstash.io:9092",
      "description": "Kafka Bootstrap Server",
      "protocol": "kafka",
      "protocolVersion": "1.0.0",
      "tags": [
        {
          "name": "kafka",
          "description": "A server using Kafka to send and/or receive messages."
        },       {
          "name": "upstash",
          "description": "A serverless Kafka provider."
        }
      ],
      "security": [
        {
          "confluentBroker": []
        }
      ]
    },
    "user-management-api": {
      "url": "https://user-management-api.open-system.workers.dev",
      "description": "User Management API Server",
      "protocol": "kafka",
      "tags": [
        {
          "name": "kafka",
          "description": "A server using Kafka to send and/or receive messages."
        },       {
          "name": "cloudflare",
          "description": "A serverless provider of functional worker services."
        }
      ],
      "security": [
        {
          "confluentBroker": []
        }
      ]
    }
  },
  "channels": {
    "open-system.user-management.user-visited": {
      "description": "A channel used to exchange messages about user visits to the application",
      "publish": {
        "summary": "Produce event data when a user visits to the application",
        "operationId": "ProduceUserVisited",
        "bindings": {
          "kafka": {
            "bindingVersion": "0.3.0",
            "groupId": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            }
          }
        },
        "message": {
          "messageId": "ProduceUserVisitedData",
          "$ref": "#/components/messages/userVisitedData"
        }
      },
      "subscribe": {
        "summary": "Consume event data when a user visits to the application",
        "operationId": "ConsumeUserVisited",
        "bindings": {
          "kafka": {
            "bindingVersion": "0.3.0",
            "groupId": {
              "type": "string"
            },
            "clientId": {
              "type": "string"
            }
          }
        },
        "message": {
          "messageId": "ConsumeUserVisitedData",
          "$ref": "#/components/messages/userVisitedData"
        }
      },
      "servers": [
        "message-broker",
        "user-management-api"
      ]
    }
  },
  "components": {
    "messages": {
      "userVisitedData": {
        "title": "User Visited Data",
        "description": "Event details describing a user's visit to the application",
        "tags": [
          {
            "name": "user-management",
            "description": "User account specific data/actions."
          }
        ],
        "contentType": "application/json",
        "headers": {
          "type": "object",
          "properties": {
            "correlationId": {
              "description": "Correlation ID set by application",
              "type": "string"
            },
            "applicationInstanceId": {
              "description": "Unique identifier for a given instance of the publishing application",
              "type": "string"
            }
          }
        },
        "payload": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "7e1216b7-9fc4-421d-b2da-6c111667e2fd",
              "description": "A unique Id used to identify the the current user",
              "minLength": 36,
              "maxLength": 36
            },
            "countryCode": {
              "type": "string",
              "example": "US",
              "description": "The user's current country code",
              "minLength": 2,
              "maxLength": 2
            },
            "continent": {
              "type": "string",
              "example": "North America",
              "description": "The user's current continent"
            },
            "latitude": {
              "type": "string",
              "description": "The user's current latitude"
            },
            "longitude": {
              "type": "string",
              "description": "The user's current longitude"
            },
            "postalCode": {
              "type": "string",
              "example": "11205",
              "description": "The user's current postalCode",
              "minLength": 5,
              "maxLength": 12
            },
            "city": {
              "type": "string",
              "example": "Albany",
              "description": "The user's current city"
            },
            "state": {
              "type": "string",
              "example": "New York",
              "description": "The user's current state"
            },
            "timezone": {
              "type": "string",
              "description": "The user's current timezone"
            },
            "ip": {
              "type": "string",
              "example": "198.51.100.1",
              "description": "The user's current ip address"
            }
          },
          "required": [
            "id"
          ]
        }
      }
    },
    "securitySchemes": {
      "confluentBroker": {
        "type": "userPassword",
        "x-configs": {
          "sasl.mechanisms": "PLAIN",
          "sasl.password": "{{CLUSTER_API_SECRET}}",
          "sasl.username": "{{CLUSTER_API_KEY}}",
          "security.protocol": "sasl_ssl"
        }
      },
      "confluentSchemaRegistry": {
        "type": "userPassword",
        "x-configs": {
          "basic.auth.user.info": "{{SCHEMA_REGISTRY_API_KEY}}:{{SCHEMA_REGISTRY_API_SECRET}}"
        }
      }
    }
  }
}
