{{>partial_header}}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc.Versioning;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using {{packageName}}.Attributes;
using OpenSystem.{{capitalDomainName}}.Application.Models;
using OpenSystem.{{capitalDomainName}}.Application.Models.DTOs;
using Microsoft.Extensions.Logging;
using System.Text.Json;
using OpenSystem.Core.WebApi.Controllers;

namespace {{apiPackage}}.v1
{ {{#operations}}

    /// <summary>
    /// Controller for {{classname}} service implementation(s)
    /// </summary>
    [Description("Controller for {{classname}} service implementation(s)")]
    [ApiVersion("{{{version}}}{{^version}}1{{/version}}")]
    [Route("api/v{version:apiVersion}")]
    public {{#classModifier}}{{.}} {{/classModifier}}class {{classname}}Controller : BaseApiController
    {
        /// <summary>
        /// Constructor method for {{classname}}Controller
        /// </summary>
        /// <remarks>Constructor method to generate an instance of a {{classname}}Controller</remarks>
        public {{classname}}Controller(ILogger<{{classname}}Controller> _logger,
            IHttpContextAccessor _context)
            : base(_logger,
            _context)
        {
        }

        /// <summary>
        /// An end point to return the current API status
        /// </summary>
        /// <remarks>Add new message record</remarks>
        /// <response code="200">Example response</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="503">Service Unavailable</response>
        [MapToApiVersion("{{{version}}}{{^version}}1{{/version}}")]
        [HttpGet]
        [Route("status")]
        public {{#operationModifier}}{{.}} {{/operationModifier}}{{#operationResultTask}}{{#operationIsAsync}}async {{/operationIsAsync}}Task<{{/operationResultTask}}IActionResult{{#operationResultTask}}>{{/operationResultTask}} Status()
        {
          var msg = $"Running on {Context.Request.Host}";

          Logger.LogInformation(msg);
          return Ok(msg);
        }

        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{.}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>{{/allParams}}{{#responses}}
        /// <response code="{{code}}">{{message}}</response>{{/responses}}
        [MapToApiVersion("{{{version}}}{{^version}}1{{/version}}")]
        [{{httpMethod}}]
        [Route("{{{pathWithoutLeadingSlash}}}")]
{{#authMethods}}
{{#isApiKey}}
        [Authorize(Policy = "{{name}}")]
{{/isApiKey}}
{{#isBasicBearer}}
        [Authorize{{#scopes}}{{#-first}}(Roles = "{{/-first}}{{scope}}{{^-last}},{{/-last}}{{#-last}}"){{/-last}}{{/scopes}}]
{{/isBasicBearer}}
{{/authMethods}}
        {{#vendorExtensions.x-aspnetcore-consumes}}
        [Consumes({{&vendorExtensions.x-aspnetcore-consumes}})]
        {{/vendorExtensions.x-aspnetcore-consumes}}
        {{^vendorExtensions.x-aspnetcore-consumes}}
        [Consumes("application/json")]
        {{/vendorExtensions.x-aspnetcore-consumes}}
        [ValidateModelState]{{#useSwashbuckle}}
        [SwaggerOperation("{{operationId}}")]{{#responses}}{{#dataType}}
        [SwaggerResponse(statusCode: {{code}}, type: typeof({{&dataType}}), description: "{{message}}")]{{/dataType}}{{/responses}}{{/useSwashbuckle}}{{^useSwashbuckle}}{{#responses}}{{#dataType}}
        [ProducesResponseType(statusCode: {{code}}, type: typeof({{&dataType}}))]{{/dataType}}{{/responses}}{{/useSwashbuckle}}
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public {{operationModifier}} {{#operationResultTask}}{{#operationIsAsync}}async {{/operationIsAsync}}Task<{{/operationResultTask}}IActionResult{{#operationResultTask}}>{{/operationResultTask}} {{operationId}}({{#allParams}}{{>pathParam}}{{>queryParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{^-last}}{{^isCookieParam}},
          {{/isCookieParam}}{{/-last}}{{#-last}}{{#operationResultTask}}{{#operationIsAsync}},
          {{/operationIsAsync}}{{/operationResultTask}}{{/-last}}{{/allParams}}{{#operationResultTask}}{{#operationIsAsync}}CancellationToken cancellationToken{{/operationIsAsync}}{{/operationResultTask}}){{^generateBody}};{{/generateBody}}
        {{#generateBody}}
        {
            {{#cookieParams}}
            var {{paramName}} = Request.Cookies["{{paramName}}"];
            {{/cookieParams}}

            // Create an instance of the request object
            var request = new {{requestName}}();

            {{#allParams}}
            {{#isBodyParam}}
            if (requestBody != null)
              requestBody.Copy(request);
            {{/isBodyParam}}
            {{/allParams}}

            {{#allParams}}
            {{^isBodyParam}}
            request.{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} = {{paramName}};
            {{/isBodyParam}}
            {{/allParams}}

            return Ok(await SendRequest(request,
              cancellationToken));
        }
        {{/generateBody}}
        {{/operation}}
    }
{{/operations}}
}
