import {
  StormGeneratedModule,
  StormGeneratedSharedModule,
} from "@open-system/tools-storm-language/module";
import {
  DefaultConfigurationProvider,
  DefaultDocumentBuilder,
  DefaultIndexManager,
  DefaultLangiumDocumentFactory,
  DefaultLangiumDocuments,
  DefaultLanguageServer,
  DefaultServiceRegistry,
  DefaultSharedModuleContext,
  LangiumDefaultSharedServices,
  LangiumServices,
  LangiumSharedServices,
  Module,
  MutexLock,
  PartialLangiumServices,
  createDefaultModule,
  inject,
} from "langium";
import { TextDocuments } from "vscode-languageserver";
import { TextDocument } from "vscode-languageserver-textdocument";
import { StormCodeActionProvider } from "./storm-code-action";
import { StormDefinitionProvider } from "./storm-definition";
import { StormFormatter } from "./storm-formatter";
import { StormLinker } from "./storm-linker";
import { StormScopeComputation, StormScopeProvider } from "./storm-scope";
import StormWorkspaceManager from "./storm-workspace-manager";
import {
  StormValidationRegistry,
  StormValidator,
} from "./validator/storm-validator";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type StormAddedServices = {
  validation: {
    StormValidator: StormValidator;
  };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type StormServices = LangiumServices & StormAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const StormModule: Module<
  StormServices,
  PartialLangiumServices & StormAddedServices
> = {
  references: {
    ScopeComputation: services => new StormScopeComputation(services),
    Linker: services => new StormLinker(services),
    ScopeProvider: services => new StormScopeProvider(services),
  },
  validation: {
    ValidationRegistry: services => new StormValidationRegistry(services),
    StormValidator: services => new StormValidator(services),
  },
  lsp: {
    Formatter: () => new StormFormatter(),
    CodeActionProvider: services => new StormCodeActionProvider(services),
    DefinitionProvider: services => new StormDefinitionProvider(services),
  },
};

// this duplicates createDefaultSharedModule except that a custom WorkspaceManager is used
export function createSharedModule(
  context: DefaultSharedModuleContext
): Module<LangiumSharedServices, LangiumDefaultSharedServices> {
  return {
    ServiceRegistry: () => new DefaultServiceRegistry(),
    lsp: {
      Connection: () => context.connection,
      LanguageServer: services => new DefaultLanguageServer(services),
    },
    workspace: {
      LangiumDocuments: services => new DefaultLangiumDocuments(services),
      LangiumDocumentFactory: services =>
        new DefaultLangiumDocumentFactory(services),
      DocumentBuilder: services => new DefaultDocumentBuilder(services),
      TextDocuments: new TextDocuments(TextDocument),
      IndexManager: services => new DefaultIndexManager(services),
      WorkspaceManager: services => new StormWorkspaceManager(services),
      FileSystemProvider: services => context.fileSystemProvider(services),
      MutexLock: () => new MutexLock(),
      ConfigurationProvider: services =>
        new DefaultConfigurationProvider(services),
    },
  };
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createStormServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Storm: StormServices;
} {
  const shared = inject(
    createSharedModule(context),
    StormGeneratedSharedModule
  );

  const Storm = inject(
    createDefaultModule({ shared }),
    StormGeneratedModule,
    StormModule
  );
  shared.ServiceRegistry.register(Storm);
  return { shared, Storm };
}
