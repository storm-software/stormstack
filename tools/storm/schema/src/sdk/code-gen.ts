import prettier, { Options } from "prettier";
import {
  CompilerOptions,
  DiagnosticCategory,
  ModuleKind,
  Project,
  ScriptTarget,
  SourceFile
} from "ts-morph";
import { PluginError } from "./types";

const prettierConfig: Options = {
  trailingComma: "none",
  tabWidth: 2,
  semi: true,
  singleQuote: false,
  quoteProps: "preserve",
  insertPragma: false,
  bracketSameLine: true,
  printWidth: 80,
  bracketSpacing: true,
  arrowParens: "avoid",
  endOfLine: "lf",
  parser: "typescript"
};

async function formatFile(sourceFile: SourceFile) {
  try {
    const content = sourceFile.getFullText();
    const formatted = prettier.format(content, prettierConfig);
    sourceFile.replaceWithText(formatted);
    await sourceFile.save();
  } catch {
    /* empty */
  }
}

/**
 * Creates a TS code generation project
 */
export function createProject(options?: CompilerOptions) {
  return new Project({
    compilerOptions: {
      target: ScriptTarget.ES2016,
      module: ModuleKind.CommonJS,
      esModuleInterop: true,
      declaration: true,
      strict: true,
      skipLibCheck: true,
      noEmitOnError: true,
      ...options
    }
  });
}

/**
 * Persists a TS project to disk.
 */
export async function saveProject(project: Project) {
  await Promise.all(
    project.getSourceFiles().map(async sf => {
      await formatFile(sf);
    })
  );
  await project.save();
}

/**
 * Emit a TS project to JS files.
 */
export async function emitProject(project: Project) {
  const errors = project
    .getPreEmitDiagnostics()
    .filter(d => d.getCategory() === DiagnosticCategory.Error);
  if (errors.length > 0) {
    console.error("Error compiling generated code:");
    console.error(
      project.formatDiagnosticsWithColorAndContext(errors.slice(0, 10))
    );
    await project.save();
    throw new PluginError("", `Error compiling generated code`);
  }

  const result = await project.emit();

  const emitErrors = result
    .getDiagnostics()
    .filter(d => d.getCategory() === DiagnosticCategory.Error);
  if (emitErrors.length > 0) {
    console.error("Some generated code is not emitted:");
    console.error(
      project.formatDiagnosticsWithColorAndContext(emitErrors.slice(0, 10))
    );
    await project.save();
    throw new PluginError("", `Error emitting generated code`);
  }
}

export const getFileHeader = (name: string, commentStart = "//") => `

${commentStart} -------------------------------------------------------------------
${commentStart}
${commentStart}                         Open System
${commentStart}                  ⚡Storm - ${name}⚡
${commentStart}
${commentStart}                 ** DO NOT MODIFY THIS FILE **
${commentStart} This file is automatically generated by the ⚡Storm CLI
${commentStart} and should not be manually updated. Any changes made to
${commentStart} this file will be overwritten the next time the schema is
${commentStart} generated.
${commentStart}
${commentStart} Repository: https://github.com/sullivanpj/open-system
${commentStart} Documentation: https://sullivanpj.github.io/open-system/
${commentStart} Contact: https://patsullivan.org/contact
${commentStart}
${commentStart} -------------------------------------------------------------------


`;
