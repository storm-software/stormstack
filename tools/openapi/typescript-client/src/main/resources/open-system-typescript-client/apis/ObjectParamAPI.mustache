import {
  RequiredError,
  COLLECTION_FORMATS,
  RequestContext,
  HttpMethod,
  ResponseContext,
  HttpFile,
  canConsumeForm,
  isCodeInRange,
  ApiException,
  AbstractHttpConfiguration
} from '@open-system/core-typescript-utilities';
{{#useInversify}}
import { injectable, inject, optional } from "inversify";
{{/useInversify}}
{{#models}}
{{#model}}
import { {{{ classname }}} } from '../models';
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}

{{#operations}}
import { Promise{{classname}} } from "./PromiseAPI";
import { {{classname}}RequestFactory, {{classname}}ResponseProcessor} from "../parsers/{{classname}}Parser";
import { Abstract{{classname}}RequestFactory, Abstract{{classname}}ResponseProcessor } from "../services/{{classname}}Parser.service";

{{#operation}}
export interface {{classname}}{{operationIdCamelCase}}Request {
    {{#allParams}}
    /**
     * {{description}}
     * @type {{dataType}}
     * @memberof {{classname}}{{nickname}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}
    {{/allParams}}
}

{{/operation}}
@injectable()
export class Object{{classname}} {
    private api: Promise{{classname}}

    public constructor(
      @inject(AbstractHttpConfiguration) configuration: AbstractHttpConfiguration,
      @inject(Abstract{{classname}}RequestFactory) requestFactory: Abstract{{classname}}RequestFactory,
      @inject(Abstract{{classname}}ResponseProcessor) responseProcessor: Abstract{{classname}}ResponseProcessor
  ) {
    this.api = new Promise{{classname}}(configuration,
      requestFactory,
      responseProcessor);
  }

{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     * @param param the request object
     */
    public {{nickname}}(param: {{classname}}{{operationIdCamelCase}}Request{{^hasRequiredParams}} = {}{{/hasRequiredParams}}, options?: AbstractHttpConfiguration): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}> {
        return this.api.{{nickname}}({{#allParams}}param.{{paramName}}, {{/allParams}} options);
    }

{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}
