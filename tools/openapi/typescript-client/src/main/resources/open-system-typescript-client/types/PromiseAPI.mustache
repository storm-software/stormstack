import { ResponseContext, RequestContext, ServiceClass } from '@base/utilities';
{{#useInversify}}
import { injectable, inject, optional } from "inversify";
import { IApiServiceConfiguration, ApiServiceConfigurationId, HttpFile } from "@base/types";
{{/useInversify}}

{{#models}}
{{#model}}
import { {{classname}} } from '@{{libraryName}}/types';
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}

import { I{{classname}}Service, {{classname}}ServiceId } from '@{{libraryName}}/types';


{{#operations}}
import { {{classname}}RequestFactory, {{classname}}ResponseProcessor} from "./{{classname}}{{extensionForDeno}}";
import { Abstract{{classname}}RequestFactory, Abstract{{classname}}ResponseProcessor } from "./{{classname}}.service";

@ServiceClass({ id: {{classname}}ServiceId })
export class {{classname}}Service implements I{{classname}}Service {
     {{#useInversify}}
    private requestFactory: Abstract{{classname}}RequestFactory;
    private responseProcessor: Abstract{{classname}}ResponseProcessor;
    {{/useInversify}}
    {{^useInversify}}
    private requestFactory: {{classname}}RequestFactory;
    private responseProcessor: {{classname}}ResponseProcessor;
    {{/useInversify}}
    private configuration: IApiServiceConfiguration;

    public constructor(
        {{#useInversify}}
        @inject(ApiServiceConfigurationId) configuration: IApiServiceConfiguration,
        @inject(Abstract{{classname}}RequestFactory) @optional() requestFactory?: Abstract{{classname}}RequestFactory,
        @inject(Abstract{{classname}}ResponseProcessor) @optional() responseProcessor?: Abstract{{classname}}ResponseProcessor
        {{/useInversify}}
        {{^useInversify}}
        configuration: IApiServiceConfiguration,
        requestFactory?: {{classname}}RequestFactory,
        responseProcessor?: {{classname}}ResponseProcessor
        {{/useInversify}}
    ) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new {{classname}}RequestFactory(configuration);
        this.responseProcessor = responseProcessor || new {{classname}}ResponseProcessor();
    }

{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{methodName}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}_options?: IApiServiceConfiguration): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}> {
        const requestContext = await this.requestFactory.{{methodName}}({{#allParams}}{{paramName}}, {{/allParams}}_options);

        return this.configuration.httpApi.send(requestContext)
    }

{{/operation}}

}

{{/operations}}


{{/apis}}
{{/apiInfo}}
