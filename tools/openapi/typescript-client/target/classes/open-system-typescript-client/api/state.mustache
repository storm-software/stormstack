import {
    ResponseContext,
    RequestContext,
    ApiErrorResult, 
    RequiredErrorResult,  
    APIRequestFactory, 
    isHttpCodeInRange, 
    canApiServiceConsumeForm, 
    isHttpCodeInRange
} from '@base/utilities';
import { HttpMethodTypes } from "@base/enums";
import { IApiServiceConfiguration, ISecurityAuthentication, HttpFile } from "@base/types";

{{#useInversify}}
import { injectable } from "inversify";
{{/useInversify}}

{{#imports}}
import { {{classname}}, {{classname}}ApiServiceId } from '@{{libraryName}}/types';
{{/imports}}


{{#operations}}

{{#operation}}
{{#isGetOperation}}
/**
{{#notes}}
* {{&notes}}
{{/notes}}
{{#summary}}
* {{&summary}}
{{/summary}}
{{#allParams}}
* @param {{paramName}} {{description}}
{{/allParams}}
*/
export namespace {{classname}}Repository {
  export const getRecord = atomFamily<
    RecordGetRequest,
    QueryAtom<{{classname}}Get200Response>
  >(({ guid }: RecordGetRequest) =>
    serviceInjector(
      {{classname}}ApiServiceId,
      (service: I{{classname}}ApiService) =>
        recordGetAtomCreator<{{classname}}Get200Response>(
          {
            guid: guid,
          },
          service.get({
            guid: guid,
          }),
          {
            enabled: !!guid,
          }
        )
    )
  );
}
{{/isGetOperation}}
{{/operation}}

{{/operations}}

