import {
  ResponseContext,
  RequestContext,
  HttpFile,
  AbstractHttpConfiguration
} from '@open-system/core-typescript-utilities';

{{#models}}
{{#model}}
import { {{{ classname }}} } from '../models';
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}

{{#operations}}
import { {{classname}}RequestFactory, {{classname}}ResponseProcessor} from "../parsers/{{classname}}";
import { Abstract{{classname}}RequestFactory, Abstract{{classname}}ResponseProcessor } from "../services/{{classname}}.service";

export class Promise{{classname}} {
    public constructor(
        public configuration: AbstractHttpConfiguration,
        public requestFactory: Abstract{{classname}}RequestFactory,
        public responseProcessor: Abstract{{classname}}ResponseProcessor
    ) {}

{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}_options?: AbstractHttpConfiguration): Promise<{{{returnType}}}{{^returnType}}void{{/returnType}}> {

        let request: RequestContext = await this.requestFactory.{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}_options);
        for (const middleware of this.configuration.middleware) {
            request = await middleware.pre(request)
        }

        let response: ResponseContext = await this.configuration.httpApi.send(request);
        for (const middleware of this.configuration.middleware) {
          response = await middleware.post(response);
        }

        return await this.responseProcessor.{{nickname}}(response);
    }

{{/operation}}

}

{{/operations}}


{{/apis}}
{{/apiInfo}}
