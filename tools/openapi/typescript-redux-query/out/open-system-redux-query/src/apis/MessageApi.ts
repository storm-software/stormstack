// tslint:disable
/**
 * Message
 * A collection of message APIs used by the Open System repository
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Patrick.Sullivan@broadridge.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    MessageDto,
    MessageDtoFromJSON,
    MessageDtoToJSON,
    MessageRequestDto,
    MessageRequestDtoFromJSON,
    MessageRequestDtoToJSON,
    SharedApiSpecProblemDetailsDto,
    SharedApiSpecProblemDetailsDtoFromJSON,
    SharedApiSpecProblemDetailsDtoToJSON,
    SharedApiSpecUpdateSuccessResponseDto,
    SharedApiSpecUpdateSuccessResponseDtoFromJSON,
    SharedApiSpecUpdateSuccessResponseDtoToJSON,
} from '../models';

export interface AddMessageRequest {
    userId: string;
    messageRequestDto?: MessageRequestDto;
}

export interface DeleteMessageRequest {
    guid: string;
    userId: string;
}

export interface GetMessageRequest {
    guid: string;
    userId: string;
}

export interface GetMessageListRequest {
    messageType: GetMessageListMessageTypeEnum;
    userId: string;
    messageNumber?: number;
}

export interface UpdateMessageRequest {
    guid: string;
    userId: string;
    messageRequestDto?: MessageRequestDto;
}


/**
 * Add new message record
 * Add Message
 */
function addMessageRaw<T>(requestParameters: AddMessageRequest, requestConfig: runtime.TypedQueryConfig<T, SharedApiSpecUpdateSuccessResponseDto> = {}): QueryConfig<T> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
        throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addMessage.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
        headerParameters['userId'] = String(requestParameters.userId);
    }


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || MessageRequestDtoToJSON(requestParameters.messageRequestDto),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SharedApiSpecUpdateSuccessResponseDtoFromJSON(body), text);
    }

    return config;
}

/**
* Add new message record
* Add Message
*/
export function addMessage<T>(requestParameters: AddMessageRequest, requestConfig?: runtime.TypedQueryConfig<T, SharedApiSpecUpdateSuccessResponseDto>): QueryConfig<T> {
    return addMessageRaw(requestParameters, requestConfig);
}

/**
 * Remove an existing message record
 * Remove Message
 */
function deleteMessageRaw<T>(requestParameters: DeleteMessageRequest, requestConfig: runtime.TypedQueryConfig<T, SharedApiSpecUpdateSuccessResponseDto> = {}): QueryConfig<T> {
    if (requestParameters.guid === null || requestParameters.guid === undefined) {
        throw new runtime.RequiredError('guid','Required parameter requestParameters.guid was null or undefined when calling deleteMessage.');
    }

    if (requestParameters.userId === null || requestParameters.userId === undefined) {
        throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteMessage.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
        headerParameters['userId'] = String(requestParameters.userId);
    }


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters.guid))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SharedApiSpecUpdateSuccessResponseDtoFromJSON(body), text);
    }

    return config;
}

/**
* Remove an existing message record
* Remove Message
*/
export function deleteMessage<T>(requestParameters: DeleteMessageRequest, requestConfig?: runtime.TypedQueryConfig<T, SharedApiSpecUpdateSuccessResponseDto>): QueryConfig<T> {
    return deleteMessageRaw(requestParameters, requestConfig);
}

/**
 * An end point that returns the system\'s message literals to a client
 * Get Message
 */
function getMessageRaw<T>(requestParameters: GetMessageRequest, requestConfig: runtime.TypedQueryConfig<T, MessageDto> = {}): QueryConfig<T> {
    if (requestParameters.guid === null || requestParameters.guid === undefined) {
        throw new runtime.RequiredError('guid','Required parameter requestParameters.guid was null or undefined when calling getMessage.');
    }

    if (requestParameters.userId === null || requestParameters.userId === undefined) {
        throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getMessage.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
        headerParameters['userId'] = String(requestParameters.userId);
    }


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters.guid))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MessageDtoFromJSON(body), text);
    }

    return config;
}

/**
* An end point that returns the system\'s message literals to a client
* Get Message
*/
export function getMessage<T>(requestParameters: GetMessageRequest, requestConfig?: runtime.TypedQueryConfig<T, MessageDto>): QueryConfig<T> {
    return getMessageRaw(requestParameters, requestConfig);
}

/**
 * An end point that returns the system\'s message literals to a client
 * Get Message List
 */
function getMessageListRaw<T>(requestParameters: GetMessageListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<MessageDto>> = {}): QueryConfig<T> {
    if (requestParameters.messageType === null || requestParameters.messageType === undefined) {
        throw new runtime.RequiredError('messageType','Required parameter requestParameters.messageType was null or undefined when calling getMessageList.');
    }

    if (requestParameters.userId === null || requestParameters.userId === undefined) {
        throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getMessageList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.messageType !== undefined) {
        queryParameters['messageType'] = requestParameters.messageType;
    }


    if (requestParameters.messageNumber !== undefined) {
        queryParameters['messageNumber'] = requestParameters.messageNumber;
    }

    const headerParameters : runtime.HttpHeaders = {};

    if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
        headerParameters['userId'] = String(requestParameters.userId);
    }


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(MessageDtoFromJSON), text);
    }

    return config;
}

/**
* An end point that returns the system\'s message literals to a client
* Get Message List
*/
export function getMessageList<T>(requestParameters: GetMessageListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<MessageDto>>): QueryConfig<T> {
    return getMessageListRaw(requestParameters, requestConfig);
}

/**
 * Update an existing message record
 * Update Message
 */
function updateMessageRaw<T>(requestParameters: UpdateMessageRequest, requestConfig: runtime.TypedQueryConfig<T, SharedApiSpecUpdateSuccessResponseDto> = {}): QueryConfig<T> {
    if (requestParameters.guid === null || requestParameters.guid === undefined) {
        throw new runtime.RequiredError('guid','Required parameter requestParameters.guid was null or undefined when calling updateMessage.');
    }

    if (requestParameters.userId === null || requestParameters.userId === undefined) {
        throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateMessage.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.userId !== undefined && requestParameters.userId !== null) {
        headerParameters['userId'] = String(requestParameters.userId);
    }


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters.guid))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || MessageRequestDtoToJSON(requestParameters.messageRequestDto),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SharedApiSpecUpdateSuccessResponseDtoFromJSON(body), text);
    }

    return config;
}

/**
* Update an existing message record
* Update Message
*/
export function updateMessage<T>(requestParameters: UpdateMessageRequest, requestConfig?: runtime.TypedQueryConfig<T, SharedApiSpecUpdateSuccessResponseDto>): QueryConfig<T> {
    return updateMessageRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum GetMessageListMessageTypeEnum {
    Fxl = 'FXL',
    _24Trading = '24  TRADING',
    _24Core = '24 CORE',
    _24General = '24 GENERAL',
    Application = 'APPLICATION',
    Client = 'CLIENT',
    Tradingvalidation = 'TRADINGVALIDATION',
    Internalvalidation = 'INTERNALVALIDATION'
}
