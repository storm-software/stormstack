import { ConsoleLogger } from "@stormstack/core-shared-logging";
import { ProcessingError } from "@stormstack/core-shared-utilities";
import prettierConfig from "@stormstack/tools-devops-config/prettier";
import prettier from "prettier";
import {
  CompilerOptions,
  DiagnosticCategory,
  ModuleKind,
  Project,
  ScriptTarget,
  SourceFile
} from "ts-morph";

export async function formatFile(
  sourceFile: SourceFile,
  parser = "typescript"
) {
  try {
    const formatted = await formatString(sourceFile.getFullText(), parser);
    sourceFile.replaceWithText(formatted);
    await sourceFile.save();
  } catch {
    /* empty */
  }
}

export async function formatString(
  content: string,
  parser = "typescript"
): Promise<string> {
  try {
    return prettier.format(content, { ...prettierConfig, parser });
  } catch (e) {
    ConsoleLogger.error("Error formatting file");
    ConsoleLogger.error(e);
    return content;
  }
}

/**
 * Creates a TS code generation project
 */
export function createProject(options?: CompilerOptions) {
  return new Project({
    compilerOptions: {
      target: ScriptTarget.ES2016,
      module: ModuleKind.CommonJS,
      esModuleInterop: true,
      declaration: true,
      strict: true,
      skipLibCheck: true,
      noEmitOnError: true,
      ...options
    }
  });
}

/**
 * Persists a TS project to disk.
 */
export async function saveProject(project: Project) {
  await Promise.all(
    project.getSourceFiles().map(async sf => {
      const extension = [".graphql", ".gql"].includes(sf.getExtension())
        ? "graphql"
        : "typescript";
      ConsoleLogger.debug(
        `Saving ${sf.getFilePath()} using the ${extension} parser`
      );

      await formatFile(sf, extension);
    })
  );
  await project.save();
}

/**
 * Emit a TS project to JS files.
 */
export async function emitProject(project: Project) {
  const errors = project
    .getPreEmitDiagnostics()
    .filter(d => d.getCategory() === DiagnosticCategory.Error);
  if (errors.length > 0) {
    console.error("Error compiling generated code:");
    console.error(
      project.formatDiagnosticsWithColorAndContext(errors.slice(0, 10))
    );
    await project.save();
    throw new ProcessingError("Error compiling generated code");
  }

  const result = await project.emit();

  const emitErrors = result
    .getDiagnostics()
    .filter(d => d.getCategory() === DiagnosticCategory.Error);
  if (emitErrors.length > 0) {
    console.error("Some generated code is not emitted:");
    console.error(
      project.formatDiagnosticsWithColorAndContext(emitErrors.slice(0, 10))
    );
    await project.save();
    throw new ProcessingError("Error emitting generated code");
  }
}

export const getFileHeader = (name: string, commentStart = "//") => `

${commentStart} -------------------------------------------------------------------
${commentStart}
${commentStart}                       StormStack
${commentStart}                  ⚡Forecast - ${name}⚡
${commentStart}
${commentStart}                 ** DO NOT MODIFY THIS FILE **
${commentStart} This file is automatically generated by the ⚡Forecast CodeGen
${commentStart} CLI and should not be manually updated. Any changes made to
${commentStart} this file will be overwritten the next time the schema is
${commentStart} generated.
${commentStart}
${commentStart} Repository: https://github.com/stormstack/stormstack
${commentStart} Documentation: https://stormstack.github.io/stormstack/
${commentStart} Contact: https://stormcloud.dev/contact
${commentStart}
${commentStart} -------------------------------------------------------------------


`;
