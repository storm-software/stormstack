import {
  BaseUtilityClass,
  EMPTY_STRING,
  isString
} from "@stormstack/core-shared-utilities";
import { AstNode } from "@stormstack/tools-forecast-language/ast";
import {
  Context,
  GENERATOR_SYMBOL,
  IGenerator,
  PluginOptions
} from "../../types";

/**
 * Forecast base Code Generator
 */
export abstract class Generator<TOptions extends PluginOptions = PluginOptions>
  extends BaseUtilityClass
  implements IGenerator
{
  public abstract get name(): string;

  public abstract get fileExtension(): string | "*";

  public abstract get commentStart(): string;

  public get __base(): string {
    return "Generator";
  }

  constructor() {
    super(GENERATOR_SYMBOL);
  }

  public abstract generate(
    options: TOptions,
    node: AstNode,
    context: Context,
    params: any
  ): Promise<string>;

  public write(
    options: TOptions,
    fileContent: string,
    fileName: string,
    fileExtension?: string
  ): Promise<void> {
    return this.innerWrite(
      options,
      `
${this.getFileHeader(options)}

${fileContent}

${this.getFileFooter(options)}
  `,
      fileName,
      fileExtension ? fileExtension : this.fileExtension
    );
  }

  public abstract save(options: TOptions): Promise<void>;

  protected abstract innerWrite(
    options: TOptions,
    fileContent: string,
    fileName: string,
    fileExtension: string
  ): Promise<void>;

  protected getFileHeader(options: TOptions): string {
    return options.header === false
      ? EMPTY_STRING
      : isString(options.header)
      ? options.header
      : this.getFileHeaderTemplate(
          options.headerName ? options.headerName : this.name,
          this.commentStart
        );
  }

  protected getFileFooter(options: TOptions): string {
    return options.footer === false
      ? EMPTY_STRING
      : isString(options.footer)
      ? options.footer
      : this.getFileFooterTemplate(this.commentStart);
  }

  protected getFileHeaderTemplate(name: string, commentStart = "//") {
    let padding = "";
    while (name.length + padding.length < 18) {
      padding += " ";
    }

    return `

${commentStart} -------------------------------------------------------------------
${commentStart}
${commentStart}                         ${padding}StormStack
${commentStart}                  ⚡Forecast - ${name}⚡
${commentStart}
${commentStart}             ** DO NOT MODIFY THIS FILE MANUALLY **
${commentStart} This file is automatically generated by the ⚡Forecast CodeGen
${commentStart} CLI and should not be manually updated. Any manual updates made to
${commentStart} this file will be overwritten the next time the CLI is
${commentStart} ran.
${commentStart}
${commentStart} Forecast is released as a part of StormStack. StormStack is
${commentStart} maintained by Storm Software under the Apache License 2.0, and is
${commentStart} free for commercial and private use. For more information, please visit
${commentStart} our licensing page.
${commentStart}
${commentStart}    Website: https://forecastjs.com
${commentStart}    Repository: https://github.com/storm-software/stormstack
${commentStart}    Documentation: https://forecastjs.com/docs
${commentStart}    Contact: https://forecastjs.com/contact
${commentStart}    Licensing: https://forecastjs.com/licensing
${commentStart}
${commentStart} -------------------------------------------------------------------


`;
  }

  protected getFileFooterTemplate = (commentStart = "//") => ``;
}
