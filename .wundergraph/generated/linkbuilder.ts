// Code generated by wunderctl. DO NOT EDIT.

export interface LinkDefinition {
  targetType: string;
  targetFieldName: string;
  sourceField: string;
  argumentSources: LinkFieldArgumentSourceDefinition[];
}

export interface LinkFieldArgumentSourceDefinition {
  name: string;
  type: "objectField" | "fieldArgument";
  path: string[];
}

class LinkBuilder<T, R extends {} = {}, TT = {}> {
  // @ts-ignore
  constructor(
    current: R = {},
    sourceField: string,
    targetType: string,
    targetField: string
  ) {
    this.current = current;
    this.sourceField = sourceField;
    this.targetType = targetType;
    this.targetField = targetField;
  }

  private readonly sourceField: string;
  private readonly targetType: string;
  private readonly targetField: string;

  // @ts-ignore
  private current: R = {};

  argument<
    P extends Exclude<keyof T, keyof R>,
    V extends T[P],
    S extends "fieldArgument" | "objectField"
  >(
    key: P,
    source: S,
    value: S extends "fieldArgument" ? string : TT,
    ...extraPath: string[]
  ) {
    const extra: {} = { [key]: { source, path: [value, ...extraPath] } };

    const instance = {
      ...(this.current as object),
      ...extra,
    } as R & Pick<T, P>;

    return new LinkBuilder<T, R & Pick<T, P>, TT>(
      instance,
      this.sourceField,
      this.targetType,
      this.targetField
    );
  }

  build = (): LinkDefinition => {
    const args = this.current as {
      [key: string]: {
        path: string[];
        source: "fieldArgument" | "objectField";
      };
    };
    return {
      argumentSources: Object.keys(args).map(key => ({
        name: key,
        type: args[key].source,
        path: args[key].path,
      })),
      targetType: this.targetType,
      sourceField: this.sourceField,
      targetFieldName: this.targetField,
    };
  };
}

export const sourceStep = <T extends {}, R extends {}>() => ({
  source: <F extends keyof T>(field: F) => {
    return targetStep<T, F, R>(field);
  },
});

const targetStep = <T, F extends keyof T, R>(field: F) => ({
  target: <r extends keyof R>(targetType: r, targetField: string) => {
    return new LinkBuilder<T[F], {}, R[r]>(
      {},
      field as string,
      targetType as string,
      targetField
    );
  },
});

interface TargetTypes {
  contact_Contact:
    | "addressLine1"
    | "addressLine2"
    | "attachments"
    | "city"
    | "companyName"
    | "countryCode"
    | "createdAt"
    | "details"
    | "emailId"
    | "firstName"
    | "id"
    | "lastName"
    | "phoneNumber"
    | "postalCode"
    | "reason"
    | "state"
    | "title"
    | "updatedAt"
    | "url"
    | "_join";
  contact_ContactAttachment:
    | "contact"
    | "contactEmail"
    | "createdAt"
    | "id"
    | "name"
    | "path"
    | "status"
    | "updatedAt"
    | "_join";
  contact_ContactAttachmentsConnection:
    | "edges"
    | "pageCursors"
    | "pageInfo"
    | "_join";
  contact_ContactAttachmentsConnectionEdge: "cursor" | "node" | "_join";
  contact_ContactEmail:
    | "contacts"
    | "createdAt"
    | "email"
    | "id"
    | "updatedAt"
    | "_join";
  contact_ContactEmailContactsConnection:
    | "edges"
    | "pageCursors"
    | "pageInfo"
    | "_join";
  contact_ContactEmailContactsConnectionEdge: "cursor" | "node" | "_join";
  contact_CreateContactPayload: "clientMutationId" | "success" | "_join";
  contact_Node: "id";
  contact_PageCursor: "cursor" | "isCurrent" | "pageNumber" | "_join";
  contact_PageCursors: "around" | "first" | "last" | "_join";
  contact_PageInfo:
    | "endCursor"
    | "hasNextPage"
    | "hasPreviousPage"
    | "startCursor"
    | "_join";
  contact_QueryEmailAddressesConnection:
    | "edges"
    | "pageCursors"
    | "pageInfo"
    | "_join";
  contact_QueryEmailAddressesConnectionEdge: "cursor" | "node" | "_join";
}

interface SourceFields {
  contact_contact: {
    id: null;
  };
  contact_contactEmail: {
    id: null;
  };
  contact_emailAddresses: {
    after: null;
    before: null;
    first: null;
    ids: null;
    last: null;
  };
  contact_node: {
    id: null;
  };
  contact_nodes: {
    ids: null;
  };
}

const linkBuilder = sourceStep<SourceFields, TargetTypes>();
export default linkBuilder;
